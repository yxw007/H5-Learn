//-------------------------------------------------------------------------
(() => {
	//!赋值时推断，类型从右像左流动,会根据赋值推断出变量类型
	let str = 'dd';
	let age = 11;
	let boolean = true;
})();
//-------------------------------------------------------------------------
(() => {
	function sum(a: string, b: string) {
		return a + b;
	}
	//! 自动推断返回值类型
	let ret = sum('a', 'b');
	console.log(ret);
})();
//-------------------------------------------------------------------------
(() => {
	type Sum = (a: string, b: string) => string;
	//! 函数从左到右进行推断
	const sum: Sum = (a, b) => a + b;
})();
//-------------------------------------------------------------------------
(() => {
	let person = {
		name: 'zf',
		age: 11
	}
	//! 可以通过属性值,推断出属性的类型
	let { name, age } = person;
})();
//-------------------------------------------------------------------------
(() => {
	let person = {
		name: 'zf',
		age: 11
	}
	//! 可以使用typeof关键字反推变量的类型
	type Person = typeof person
})();
//-------------------------------------------------------------------------
(() => {
	interface IPerson {
		name: string,
		age: number,
		job: {
			address: string
		}
	}
	//! 索引访问操作符，推断类型
	type job = IPerson['job']
})();
//-------------------------------------------------------------------------
(() => {
	interface IPerson {
		name?: string,
		age: number
	}
	//! 利用keyof 进行类型映射
	type MapPerson = { [key in keyof IPerson]: IPerson[key] }
})();
//-------------------------------------------------------------------------
